package com.xiyouliwp.fangweixin;

package com.example.xyliwp.ipet.activity;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.provider.MediaStore;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.GridView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

/**
 * 需求：IPet的图片选择器,
 * Created by lwp940118 on 2016/5/29.
 * 李文朋
 */
public class Activity_Image_Add extends Activity implements List_File_PopWind.OnImageDirSelected{

    private ImageButton imageButton_ImageAdd_back;
    private ImageButton imageButton_ImageAdd_finish;
    private GridView gridView_ImageAdd;
    int totalCount = 0;
    /**
     * 存储文件夹中的图片数量
     */
    private int mPicSize = 0;
    /**
     * 图片数量最多的文件夹
     */
    private File maxImageFile;

    private RelativeLayout relativeLayout_popwind;

    /**
     * 所以图片
     */
    private List<String> mImags;

    /**
     * list存放扫描到的文件夹的信息
     */
    private List<ImageFolder> imageFolders = new ArrayList<ImageFolder>();
    /**
     * hashset  基于hashmap实现的，利用他可以防止一个文件夹  多次扫描
     */
    private HashSet<String> mImagePath = new HashSet<String>();

    //弹出对话框  进度条
    private ProgressDialog mprogressDialog;

    private TextView textview_ChooseDir;
    private TextView textview_ImageCount;

    //定义屏幕的高度
    private int screenHeight = 0;

    /**
     * 用户选择的图片，存储为图片的完整路径
     */
    public static List<String> mSelectedImage = new LinkedList<String>();

    private MyAdapter myAdapter;

    private List_File_PopWind popWind;

    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            //加载的那个对话框  销毁
            mprogressDialog.dismiss();
            //view绑定数据
            dateView();
            //初始化Popwind
            initPopWind();
        }
    };


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_image_add);

        DisplayMetrics displayMetrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
        screenHeight = displayMetrics.heightPixels;
        Log.e("screenHeight---->", "" + screenHeight);

        findId();
        kongJianSheZhi();
        getImages();
        initEvent();

    }

    /**
     * 弹出popwind
     */
    private void initEvent() {
        relativeLayout_popwind.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                popWind.setAnimationStyle(R.style.AnimBottom);
                popWind.showAtLocation(Activity_Image_Add.this.findViewById(R.id.imagebutton_imageadd_back),
                        Gravity.BOTTOM, 0, 0);

                // 设置背景颜色变暗
                WindowManager.LayoutParams lp = getWindow().getAttributes();
                lp.alpha = 0.3f;
                getWindow().setAttributes(lp);
            }
        });

    }

    /**
     * 绑定view的数据
     */
    private void dateView() {
        if (maxImageFile == null) {
            Toast.makeText(getApplicationContext(), "没有扫描到图片", Toast.LENGTH_SHORT).show();
            return;
        }

        //aslist  连接列表与数组，当一个更新时 另一个也自动更新但是没有add  和remove方法
        mImags = Arrays.asList(maxImageFile.list());
        myAdapter = new MyAdapter(getApplicationContext(), mImags, R.layout.item_gridview_imageadd,
                maxImageFile.getAbsolutePath());
        gridView_ImageAdd.setAdapter(myAdapter);
        //显示多少张图片 在popwind中
        textview_ImageCount.setText(totalCount+"张");
    }

    /**
     * 初始化popwind的弹出界面
     */
    private void initPopWind(){
        popWind = new List_File_PopWind(LinearLayout.LayoutParams.MATCH_PARENT, (int) (screenHeight
                * 0.7), imageFolders, LayoutInflater.from(getApplicationContext())
                .inflate(R.layout.list_dir, null));
        popWind.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                // 设置背景颜色变暗
                WindowManager.LayoutParams lp = getWindow().getAttributes();
                lp.alpha = 1.0f;
                getWindow().setAttributes(lp);
            }
        });
        //设置文件夹的回调
        popWind.setOnImageDirSelected(this);
    }

    /**
     * 利用contentProvider扫描手机中的图片，并获取jpn最多的那个文件夹
     * ContentProvider  为Android四大组件，详情见我的博客
     * Android四大组件介绍http://blog.csdn.net/qq_30000411/article/details/51355390
     */

    private void getImages() {

        //判断Sd卡的状态 是否可用
        if (!Environment.getExternalStorageState().equals(
                Environment.MEDIA_MOUNTED)) {
            Toast.makeText(getApplicationContext(), "没有找到SD", Toast.LENGTH_SHORT).show();
        }
        //显示进度条  加载中...
        mprogressDialog = ProgressDialog.show(this, null, "图片读取中...");
        new Thread(new Runnable() {
            @Override
            public void run() {
                //读取第一张图片
                String firstImagePath = null;
                //EXTERNAL_CONTENT_URI多选
                Uri mImageUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                //ContentResolver应用之间数据共享
                ContentResolver mResolver = Activity_Image_Add.this.getContentResolver();
                //数据查找，找出JPEG和png格式的图片,,,MediaStore为Android手机系统的多媒体数据库
                Cursor mCursor = mResolver.query(mImageUri, null, MediaStore.Images.Media.MIME_TYPE + "=? or "
                                + MediaStore.Images.Media.MIME_TYPE + "=?",
                        new String[]{"image/jpeg", "image/png"}, MediaStore.Images.Media.DATE_MODIFIED);
                //读取图片
                while (mCursor.moveToNext()) {
                    //定义图片的路径
                    String imagePath = mCursor.getString(mCursor.getColumnIndex
                            (MediaStore.Images.Media.DATA));
                    //获取第一张图片的路径
                    if (firstImagePath == null)
                        firstImagePath = imagePath;

                    //获取该图片的父路径名
                    File parentFile = new File(imagePath).getParentFile();
                    if (parentFile == null)
                        continue;
                    String folderPath = parentFile.getAbsolutePath();
                    ImageFolder imageFolder = null;
                    //利用hashset防止一个文件夹被多次扫描
                    if (mImagePath.contains(folderPath)) {
                        continue;
                    } else {
                        mImagePath.add(folderPath);
                        //初始化  ImageFolder
                        imageFolder = new ImageFolder();
                        imageFolder.setFolderPath(folderPath);
                        imageFolder.setFirstImagePath(imagePath);
                    }
                    int picSize = parentFile.list(new FilenameFilter() {
                        @Override
                        public boolean accept(File dir, String filename) {
                            if (filename.endsWith(".png") || filename.endsWith(".jpg")
                                    || filename.endsWith(".jpeg"))
                                return true;
                            return false;
                        }
                    }).length;

                    totalCount += picSize;
                    imageFolder.setImageCount(picSize);
                    imageFolders.add(imageFolder);
                    //更新最大数量文件夹
                    if (picSize > mPicSize) {
                        mPicSize = picSize;
                        maxImageFile = parentFile;
                    }
                }
                mCursor.close();
                //扫描完成  hashset释放
                mImagePath = null;
                //通知  线程Handler  图片扫秒完成
                handler.sendEmptyMessage(0x110);

            }
        }).start();

    }

    private void findId() {

        gridView_ImageAdd = (GridView) findViewById(R.id.gridview_imageadd);
        imageButton_ImageAdd_back = (ImageButton) findViewById(R.id.imagebutton_imageadd_back);
        imageButton_ImageAdd_finish = (ImageButton) findViewById(R.id.imagebutton_imageadd_finish);
        textview_ChooseDir = (TextView)findViewById(R.id.id_choose_dir);
        textview_ImageCount = (TextView)findViewById(R.id.id_total_count);
        relativeLayout_popwind = (RelativeLayout)findViewById(R.id.id_bottom_ly);

    }

    private void kongJianSheZhi() {

        imageButton_ImageAdd_finish.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                MainActivity.xuanze = mSelectedImage;
                finish();
            }
        });

        imageButton_ImageAdd_back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });

    }

    @Override
    public void selected(ImageFolder floder) {

        maxImageFile = new File(floder.getFolderPath());
        mImags = Arrays.asList(maxImageFile.list(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String filename) {
                if (filename.endsWith(".jpg") || filename.endsWith(".png")
                        || filename.endsWith(".jpeg"))
                    return true;
                return false;
            }
        }));
        /**
         * 可以看到文件夹的路径和图片的路径分开保存，极大的减少了内存的消耗；
         */
        myAdapter = new MyAdapter(getApplicationContext(), mImags,
                R.layout.item_gridview_imageadd, maxImageFile.getAbsolutePath());
        gridView_ImageAdd.setAdapter(myAdapter);
        // mAdapter.notifyDataSetChanged();
        textview_ImageCount.setText(floder.getImageCount() + "张");
        textview_ChooseDir.setText(floder.getFolderName());
        popWind.dismiss();

    }

    /**
     * gridview的定义适配器
     */

    public class MyAdapter extends CommonAdapter<String> {


        /**
         * 文件夹路径
         */
        private String mDirPath;

        public MyAdapter(Context context, List<String> mDatas, int itemLayoutId,
                         String dirPath) {
            super(context, mDatas, itemLayoutId);
            this.mDirPath = dirPath;
        }

        @Override
        public void convert(final ViewHolder helper, final String item) {
            //设置no_pic
            helper.setImageResource(R.id.id_item_image, R.drawable.pictures_no);
            //设置no_selected
            helper.setImageResource(R.id.id_item_select,
                    R.drawable.picture_unselected);
            //设置图片
            helper.setImageByUrl(R.id.id_item_image, mDirPath + "/" + item);

            final ImageView mImageView = helper.getView(R.id.id_item_image);
            final ImageView mSelect = helper.getView(R.id.id_item_select);

            mImageView.setColorFilter(null);
            //设置ImageView的点击事件
            mImageView.setOnClickListener(new View.OnClickListener() {
                //选择，则将图片变暗，反之则反之
                @Override
                public void onClick(View v) {

                    // 已经选择过该图片
                    if (mSelectedImage.contains(mDirPath + "/" + item)) {
                        mSelectedImage.remove(mDirPath + "/" + item);
                        mSelect.setImageResource(R.mipmap.picture_unselected);
                        mImageView.setColorFilter(null);
                    } else{// 未选择该图片
                        mSelectedImage.add(mDirPath + "/" + item);
                        mSelect.setImageResource(R.mipmap.pictures_selected);
                        mImageView.setColorFilter(Color.parseColor("#77000000"));
                    }

                }
            });

            /**
             * 已经选择过的图片，显示出选择过的效果
             */
            if (mSelectedImage.contains(mDirPath + "/" + item)) {
                mSelect.setImageResource(R.mipmap.pictures_selected);
                mImageView.setColorFilter(Color.parseColor("#77000000"));
            }

        }
    }


}
