import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

/**
 * 需求：给出一个整数K和一个无序数组A，A的元素为N个互不相同的整数，找出数组A中所有和等于K的数对。 例如K =
 * 8，数组A：{-1,6,5,3,4,2,9,0,8}，所有和等于8的数对包括(-1,9)，(0,8)，(2,6)，(3,5)。
 * 
 * @author lwp940118 李文朋
 */
public class DengYuKShu {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scanner = new Scanner(System.in);
		int k = scanner.nextInt();
		int n = scanner.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = scanner.nextInt();
		}
		arr = quickSort(arr);
		FindCouple(arr, n, k);
		
	}
	
	 public static int[] quickSort(int[] numbers){  
	        if(numbers == null || numbers.length < 2){  
	            return numbers;  
	        }  
	        int i = 0;  
	        int j = numbers.length - 1;  
	        int temp;  
	        while(j != i){  
	            for(int m = j; m <= j && m >= i ; m --){  
	                j = m;  
	                if(numbers[i] > numbers[m]){  
	                    temp = numbers[i];  
	                    numbers[i] = numbers[m];  
	                    numbers[m] = temp;  
	                    break;  
	                }  
	            }  
	            if(i == j){  
	                break;  
	            }  
	            for(int n = i; n >= i && n <= j; n ++){  
	                i = n;  
	                if(numbers[j] < numbers[n]){  
	                    temp = numbers[j];  
	                    numbers[j] = numbers[n];  
	                    numbers[n] = temp;  
	                    break;  
	                }  
	            }  
	        }  
	        int[] numbersLeft = new int[i];  
	        for(int x = 0; x < i; x ++){  
	            numbersLeft[x] = numbers[x];  
	        }  
	        numbersLeft = quickSort(numbersLeft);  
	        for(int x = 0; x < i; x ++){  
	            numbers[x] = numbersLeft[x];  
	        }  
	          
	        int[] numbersRight = new int[numbers.length - i - 1];  
	        for(int x = 0; x < numbers.length - i - 1; x ++){  
	            numbersRight[x] = numbers[i + x + 1];  
	        }  
	        numbersRight = quickSort(numbersRight);  
	        for(int x = i + 1; x < numbers.length; x ++){  
	            numbers[x] = numbersRight[x - i - 1];  
	        }  
	        return numbers;  
	    }  
	
	private static int FindCouple(int a[],int n,int k)
	{
	    int i=0,j=n-1;
	    int tag = 0;

	    while(i < j)
	    {
	        if(a[i] + a[j] == k)
	        {
	            System.out.printf("%d %d\n",a[i],a[j]);
	            i++;
	            j--;
	            tag = 1;
	        }
	        else if(a[i] + a[j] > k) j--;
	        else i++;
	    }
	    
	    if (tag == 0) {
			System.out.println("No Solution");
		}
	    
	    return 1;
	}


}
